#问题1：这里假设函数为f(x)=x+1,求积分的上下限为[1,2]
#可以利用Scipy模块下的子模块integrate里的quad函数来求这个数学问题的计算值。

from scipy import integrate
def f(x):
    return x + 1
v, err = integrate.quad(f, 1, 2)
print(v)

#问题2：但对于f(x)=ax+b这种函数，a和b肯能未知的这种函数，quad能用么？答案是可以的，quad有形参args可以传入一些参数进去的。
from scipy import integrate
def f(x, a, b):
    return a * x + b
v, err = integrate.quad(f, 1, 2, args = (-1, 1)) #a=-1,b=1
print(v)

#问题3：如果遇到积分函数有断点，可以通过quad函数的points给出断点继续求积分。例如
#这里f(x)在x=0的地方存在断点，如果没有给出断点就通过quad计算计算：
from scipy import integrate
import numpy as np
def f(x):
    return 1 / np.sqrt(abs(x))
v, err = integrate.quad(f, -1, 1, points=[0]) #point设置断点
print(v)

#函数可视化
import numpy as np, matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.axes3d import Axes3D
fig, ax = plt.subplots(figsize=(8, 3))
x = np.linspace(-1, 1, 10000) #x轴的数值范围
ax.plot(x, f(x), lw=2) 
ax.fill_between(x, f(x), color='green', alpha=0.5) #绿色阴影部分
ax.set_xlabel("$x$", fontsize=18) #x轴名字
ax.set_ylabel("$f(x)$", fontsize=18) #y轴名字
ax.set_ylim(0, 25) #y的数值范围
plt.show()
#问题4：求积分而是有这个函数的10个样本数据，那传入quad函数的不是f(x)=x， 而是对应的各个(xi,yi)。
from scipy import integrate
import numpy as np
def f(x):
    return np.sqrt(x)
x = np.linspace(0, 2, 10)
y = f(x)
v = integrate.trapz(y, x)
print(v)

# 多重积分
#SciPy下的二重积分可以用dblquad函数来计算、三重积分可以用tplquad函数来计算而关于f(x1,x2,⋯,xn)的多重积分可以使用nquad函数。
#那么dblquad函数的第一个形参应是f(x,y)、第2、3、4、5分别是a、b、g(x)、h(x),也就是说dblquad函数的第4和5是一个函数。
from scipy import integrate
import numpy as np
def f(x, y):
    return x * y
def h(x):
    return x
v, err = integrate.dblquad(f, 1, 2, lambda x: 1, h)
print(v)

#三重积分
from scipy import integrate
import numpy as np
f = lambda x, y, z : x
g = lambda x : 0
h = lambda x : (1 - x) / 2
q = lambda x, y : 0
r = lambda x, y : 1 - x - 2 * y 
v, err = integrate.tplquad(f, 0, 1, g, h, q, r)
print(v)
